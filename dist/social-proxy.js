(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.endpoints = {
    slack: 'https://social-proxy.herokuapp.com/slack',
    instagram: 'https://social-proxy.herokuapp.com/instagram',
};
const config = {
    endpoints: exports.endpoints,
};
exports.default = config;

},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const instagram_1 = require("./modules/instagram");
const cache_1 = require("./modules/cache");
const slack_1 = require("./modules/slack");
(function (window) {
    if (window['socialProxy']) {
        console.log('Whoops, looks like the `socialProxy` API has already been added!');
        return;
    }
    class SocialProxy {
        constructor() {
            this.instagram = new instagram_1.InstagramModule({ ref: this });
            this.cache = new cache_1.CacheModule({ ref: this });
            this.slack = new slack_1.SlackModule({ ref: this });
        }
    }
    ;
    window['socialProxy'] = new SocialProxy();
})(window);

},{"./modules/cache":3,"./modules/instagram":4,"./modules/slack":5}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CacheModule {
    constructor(options = {}) {
        if (options.ref) {
            this.ref = options.ref;
        }
    }
    sanitizeTtl(ttl) {
        return (ttl && typeof ttl === 'number') ? (new Date().getTime() + ttl) : null;
    }
    getDefaultTtl() {
        return (new Date().getTime() + (1000 * 60 * 60 * 24 * 7));
    }
    getCachePrefix() {
        return 'socialProxy';
    }
    getCacheKey(options = {}) {
        var platform = options.platform;
        var handle = options.handle;
        var url = options.url;
        if (platform && handle && url) {
            return `${this.getCachePrefix()}__${platform}__${handle}__${url}`;
        }
        else {
            return null;
        }
    }
    decorateCache(data = {}) {
        if (!data.socialProxy) {
            data.socialProxy = {};
        }
        if (data.socialProxy.ttl && typeof data.socialProxy.ttl === 'number') {
            data.socialProxy.isExpired = (data.socialProxy.ttl < new Date().getTime());
        }
        return data;
    }
    getCache(options = {}) {
        var key = this.getCacheKey(options);
        var data = null;
        if (!key) {
            return null;
        }
        data = window.localStorage.getItem(key);
        return (data) ? this.decorateCache(JSON.parse(data)) : data;
    }
    setCache(data, options) {
        if (!window.localStorage) {
            return;
        }
        const key = this.getCacheKey(options);
        const ttl = this.sanitizeTtl(options.ttl) || this.getDefaultTtl();
        data.socialProxy = {
            ttl: ttl,
        };
        window.localStorage.setItem(key, JSON.stringify(data));
    }
}
exports.CacheModule = CacheModule;

},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
class InstagramModule {
    constructor(options = {}) {
        if (options.ref) {
            this.ref = options.ref;
        }
    }
    fetch(handle, options = {}) {
        return new Promise((resolve, reject) => {
            var query = options.query || {};
            var ttl = options.ttl || null;
            var queryString = Object.keys(query).map((key) => { return `${key}=${query[key]}`; }).join('&');
            var url = `${config_1.endpoints.instagram}/${handle}?${queryString}`;
            var cachedData = this.ref.cache.getCache({ platform: 'instagram', handle, url });
            if (!options.bustCache && cachedData && !cachedData.socialProxy.isExpired) {
                resolve(cachedData);
                return;
            }
            else {
                fetch(url)
                    .then((response) => {
                    return response.json();
                })
                    .then((data) => {
                    if (data.error) {
                        reject(data);
                        return;
                    }
                    if (!!options.cache) {
                        this.ref.cache.setCache(data, {
                            platform: 'instagram',
                            handle,
                            url,
                            ttl,
                        });
                    }
                    resolve(data);
                })
                    .catch((err) => {
                    reject(err);
                });
            }
        });
    }
}
exports.InstagramModule = InstagramModule;

},{"../../config":1}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("../../config");
class SlackModule {
    constructor(options = {}) {
        if (options.ref) {
            this.ref = options.ref;
        }
    }
    post(handle, options = {}) {
        return new Promise((resolve, reject) => {
            let { text } = options;
            if (!handle || typeof handle !== 'string') {
                reject('Missing `handle`');
                return;
            }
            if (!text || typeof text !== 'string') {
                reject('`options` object must include a `text` key of type string.');
                return;
            }
            let url = `${config_1.endpoints.slack}/${handle}?text=${text}`;
            let requestConfig = {
                method: 'POST',
            };
            fetch(url, requestConfig)
                .then((response) => {
                resolve(response.text());
            })
                .catch((err) => {
                reject(err);
            });
        });
    }
}
exports.SlackModule = SlackModule;

},{"../../config":1}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvY29uZmlnL2luZGV4LnRzIiwic3JjL21haW4udHMiLCJzcmMvbW9kdWxlcy9jYWNoZS9pbmRleC50cyIsInNyYy9tb2R1bGVzL2luc3RhZ3JhbS9pbmRleC50cyIsInNyYy9tb2R1bGVzL3NsYWNrL2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUNBYSxRQUFBLFNBQVMsR0FBRztJQUN4QixLQUFLLEVBQUUsMENBQTBDO0lBQ2pELFNBQVMsRUFBRSw4Q0FBOEM7Q0FDekQsQ0FBQztBQUVGLE1BQU0sTUFBTSxHQUFHO0lBQ2QsU0FBUyxFQUFULGlCQUFTO0NBQ1QsQ0FBQztBQUVGLGtCQUFlLE1BQU0sQ0FBQzs7Ozs7QUNOdEIsbURBQXNEO0FBQ3RELDJDQUE4QztBQUM5QywyQ0FBOEM7QUFHOUMsQ0FBRSxVQUFVLE1BQVc7SUFDdEIsRUFBRSxDQUFDLENBQUUsTUFBTSxDQUFFLGFBQWEsQ0FBRyxDQUFDLENBQUMsQ0FBQztRQUMvQixPQUFPLENBQUMsR0FBRyxDQUFFLGtFQUFrRSxDQUFFLENBQUM7UUFDbEYsTUFBTSxDQUFDO0lBQ1IsQ0FBQztJQUVEO1FBS0M7WUFDQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksMkJBQWUsQ0FBRSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBRSxDQUFDO1lBQ3RELElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxtQkFBVyxDQUFFLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxDQUFFLENBQUM7WUFDOUMsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLG1CQUFXLENBQUUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBQztRQUMvQyxDQUFDO0tBQ0Q7SUFBQSxDQUFDO0lBRUYsTUFBTSxDQUFFLGFBQWEsQ0FBRSxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7QUFDN0MsQ0FBQyxDQUFFLENBQUUsTUFB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O2lCQUNGLEtBQUssQ0FBRSxDQUFFLEdBQUcsRUFBRyxFQUFFO2dCQUNqQixNQUFNLENBQUUsR0FBRyxDQUFFLENBQUM7WUFDZixDQUFDLENBQUUsQ0FBQztRQUNOLENBQUMsQ0FBRSxDQUFDO0lBQ0wsQ0FBQztDQUNEO0FBL0NELGtDQStDQyIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCJleHBvcnQgY29uc3QgZW5kcG9pbnRzID0ge1xuXHRzbGFjazogJ2h0dHBzOi8vc29jaWFsLXByb3h5Lmhlcm9rdWFwcC5jb20vc2xhY2snLFxuXHRpbnN0YWdyYW06ICdodHRwczovL3NvY2lhbC1wcm94eS5oZXJva3VhcHAuY29tL2luc3RhZ3JhbScsXG59O1xuXG5jb25zdCBjb25maWcgPSB7XG5cdGVuZHBvaW50cyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNvbmZpZztcbiIsIi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyBJTVBPUlQgTU9EVUxFU1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbmltcG9ydCB7IEluc3RhZ3JhbU1vZHVsZSB9IGZyb20gJy4vbW9kdWxlcy9pbnN0YWdyYW0nO1xuaW1wb3J0IHsgQ2FjaGVNb2R1bGUgfSBmcm9tICcuL21vZHVsZXMvY2FjaGUnO1xuaW1wb3J0IHsgU2xhY2tNb2R1bGUgfSBmcm9tICcuL21vZHVsZXMvc2xhY2snO1xuaW1wb3J0IHsgU29jaWFsUHJveHlJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuXG4oIGZ1bmN0aW9uKCB3aW5kb3c6IGFueSApIHtcblx0aWYgKCB3aW5kb3dbICdzb2NpYWxQcm94eScgXSApIHtcblx0XHRjb25zb2xlLmxvZyggJ1dob29wcywgbG9va3MgbGlrZSB0aGUgYHNvY2lhbFByb3h5YCBBUEkgaGFzIGFscmVhZHkgYmVlbiBhZGRlZCEnICk7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y2xhc3MgU29jaWFsUHJveHkgaW1wbGVtZW50cyBTb2NpYWxQcm94eUludGVyZmFjZSB7XG5cdFx0cHVibGljIGluc3RhZ3JhbTogSW5zdGFncmFtTW9kdWxlO1xuXHRcdHB1YmxpYyBjYWNoZTogQ2FjaGVNb2R1bGU7XG5cdFx0cHVibGljIHNsYWNrOiBTbGFja01vZHVsZTtcblxuXHRcdGNvbnN0cnVjdG9yKCkge1xuXHRcdFx0dGhpcy5pbnN0YWdyYW0gPSBuZXcgSW5zdGFncmFtTW9kdWxlKCB7IHJlZjogdGhpcyB9ICk7XG5cdFx0XHR0aGlzLmNhY2hlID0gbmV3IENhY2hlTW9kdWxlKCB7IHJlZjogdGhpcyB9ICk7XG5cdFx0XHR0aGlzLnNsYWNrID0gbmV3IFNsYWNrTW9kdWxlKCB7IHJlZjogdGhpcyB9ICk7XG5cdFx0fVxuXHR9O1xuXG5cdHdpbmRvd1sgJ3NvY2lhbFByb3h5JyBdID0gbmV3IFNvY2lhbFByb3h5KCk7XG59ICkoIHdpbmRvdyApO1xuIiwiaW1wb3J0IHsgTW9kdWxlSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBDYWNoZU1vZHVsZSBpbXBsZW1lbnRzIE1vZHVsZUludGVyZmFjZSB7XG5cdHB1YmxpYyByZWY6IGFueTtcblxuXHRjb25zdHJ1Y3Rvciggb3B0aW9uczogYW55ID0ge30gKSB7XG5cdFx0aWYgKCBvcHRpb25zLnJlZiApIHtcblx0XHRcdHRoaXMucmVmID0gb3B0aW9ucy5yZWY7XG5cdFx0fVxuXHR9XG5cblx0Ly8gSU5TVEFOQ0UgTUVUSE9EU1xuXHQvKipcblx0ICogRW5zdXJlcyB0aGF0IHRoZSBgdHRsYCBpcyBhIG51bWJlcjsgYWRkcyB0byBjdXJyZW50IHRpbWVzdGFtcCAoaW4gTVMpIHRvIHZhbHVlIHByb3ZpZGVkLlxuXHQgKlxuXHQgKiBJZiBgdHRsYCBpcyBtaXNzaW5nL2ludmFsaWQsIGZ1bmN0aW9uIHJldHVybnMgYG51bGxgLlxuXHQgKlxuXHQgKiBAcGFyYW0ge251bWJlcn0gdHRsXG5cdCAqIEByZXR1cm4ge251bWJlcnxudWxsfVxuXHQgKi9cblx0c2FuaXRpemVUdGwoIHR0bDogbnVtYmVyICk6IGFueSB7XG5cdFx0cmV0dXJuICggdHRsICYmIHR5cGVvZiB0dGwgPT09ICdudW1iZXInICkgPyAoIG5ldyBEYXRlKCkuZ2V0VGltZSgpICsgdHRsICkgOiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGRlZmF1bHQgYHR0bGAgdmFsdWUgKGllLiAxIHdlZWsgZnJvbSBjdXJyZW50IG1vbWVudCwgYXMgTVMpLlxuXHQgKlxuXHQgKiBAcmV0dXJuIHtudW1iZXJ9XG5cdCAqL1xuXHRnZXREZWZhdWx0VHRsKCk6IG51bWJlciB7XG5cdFx0cmV0dXJuICggbmV3IERhdGUoKS5nZXRUaW1lKCkgKyAoIDEwMDAgKiA2MCAqIDYwICogMjQgKiA3ICkgKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBTb2NpYWwgUHJveHkgY2FjaGUgcHJlZml4L25hbWVzcGFjZSBzdHJpbmcuXG5cdCAqXG5cdCAqIEByZXR1cm4ge3N0cmluZ31cblx0ICovXG5cdGdldENhY2hlUHJlZml4KCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuICdzb2NpYWxQcm94eSc7XG5cdH1cblxuXHQvKipcblx0ICogR2l2ZW4gYW4gYG9wdGlvbnNgIG9iamVjdCwgZnVuY3Rpb24gcmV0dXJucyBhIHZhbGlkIFNvY2lhbCBQcm94eSBjYWNoZSBrZXkgb3IgZmFsbHMgYmFjayB0byBgbnVsbGAuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAqL1xuXHRnZXRDYWNoZUtleSggb3B0aW9uczogYW55ID0ge30gKTogYW55IHtcblx0XHR2YXIgcGxhdGZvcm0gPSBvcHRpb25zLnBsYXRmb3JtO1xuXHRcdHZhciBoYW5kbGUgPSBvcHRpb25zLmhhbmRsZTtcblx0XHR2YXIgdXJsID0gb3B0aW9ucy51cmw7XG5cblx0XHRpZiAoIHBsYXRmb3JtICYmIGhhbmRsZSAmJiB1cmwgKSB7XG5cdFx0XHRyZXR1cm4gYCR7dGhpcy5nZXRDYWNoZVByZWZpeCgpfV9fJHtwbGF0Zm9ybX1fXyR7aGFuZGxlfV9fJHt1cmx9YDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdpdmVuIGEgY2FjaGUgZGF0YSBvYmplY3QsIGZ1bmN0aW9uIGFkZHMgYW4gYGlzRXhwaXJlZGAgZmxhZyB0byB0aGUgYHNvY2lhbFByb3h5YCBrZXkuXG5cdCAqXG5cdCAqIGBpc0V4cGlyZWRgIGlzIHRydWUgaWYgdGhlIGNhY2hlJ3MgYHR0bGAgdGltZXN0YW1wIGlzIGxlc3MgdGhhbiB0aGUgY3VycmVudCBtb21lbnQuIE90aGVyd2lzZSwgYGlzRXhwaXJlZGAgaXMgZmFsc2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fVxuXHQgKiBAcmV0dXJuIHtPYmplY3R9XG5cdCAqL1xuXHRkZWNvcmF0ZUNhY2hlKCBkYXRhOiBhbnkgPSB7fSApOiBhbnkge1xuXHRcdGlmICggIWRhdGEuc29jaWFsUHJveHkgKSB7XG5cdFx0XHRkYXRhLnNvY2lhbFByb3h5ID0ge307XG5cdFx0fVxuXG5cdFx0aWYgKCBkYXRhLnNvY2lhbFByb3h5LnR0bCAmJiB0eXBlb2YgZGF0YS5zb2NpYWxQcm94eS50dGwgPT09ICdudW1iZXInICkge1xuXHRcdFx0ZGF0YS5zb2NpYWxQcm94eS5pc0V4cGlyZWQgPSAoIGRhdGEuc29jaWFsUHJveHkudHRsIDwgbmV3IERhdGUoKS5nZXRUaW1lKCkgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGF0YTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHaXZlbiBhbiBgb3B0aW9uc2Agb2JqZWN0LCBmdW5jdGlvbiBhc3NlbWJsZXMgYSBjYWNoZSBrZXkgYW5kIGF0dGVtcHRzIHRvIGZldGNoIHRoZSBjb3JyZXNwb25kaW5nIGRhdGEuXG5cdCAqXG5cdCAqIElmIHRoZSByZXF1aXJlZCBhcmd1bWVudHMgYXJlIG1pc3NpbmcsIG9yIHRoZSBkYXRhIGRvZXMgbm90IGV4aXN0LCBmdW5jdGlvbiByZXR1cm5zIGBudWxsYC5cblx0ICpcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcblx0ICogQHBhcmFtIHtNaXhlZHxudWxsfVxuXHQgKi9cblx0Z2V0Q2FjaGUoIG9wdGlvbnM6IGFueSA9IHt9ICk6IGFueSB7XG5cdFx0dmFyIGtleSA9IHRoaXMuZ2V0Q2FjaGVLZXkoIG9wdGlvbnMgKTtcblx0XHR2YXIgZGF0YSA9IG51bGw7XG5cblx0XHRpZiAoICFrZXkgKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRkYXRhID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCBrZXkgKTtcblxuXHRcdHJldHVybiAoIGRhdGEgKSA/IHRoaXMuZGVjb3JhdGVDYWNoZSggSlNPTi5wYXJzZSggZGF0YSApICkgOiBkYXRhO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNhdmVzIHRoZSBgZGF0YWAgdG8gdGhlIGNhY2hlIHVzaW5nIHRoZSBgb3B0aW9uc2AgcHJvdmlkZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG5cdCAqL1xuXHRzZXRDYWNoZSggZGF0YTogYW55LCBvcHRpb25zOiBhbnkgKTogYW55IHtcblx0XHRpZiAoICF3aW5kb3cubG9jYWxTdG9yYWdlICkge1xuXHRcdFx0Ly8vIFRPRE9bQGpybXlrb2x5bl06IFByaW50IHdhcm5pbmcgbWVzc2FnZS5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBrZXkgPSB0aGlzLmdldENhY2hlS2V5KCBvcHRpb25zICk7XG5cdFx0Y29uc3QgdHRsID0gdGhpcy5zYW5pdGl6ZVR0bCggb3B0aW9ucy50dGwgKSB8fCB0aGlzLmdldERlZmF1bHRUdGwoKTtcblxuXHRcdC8vIFVwZGF0ZSBkYXRhIHdpdGggYHNvY2lhbFByb3h5YCBjbGllbnQgaW5mby5cblx0XHRkYXRhLnNvY2lhbFByb3h5ID0ge1xuXHRcdFx0dHRsOiB0dGwsXG5cdFx0fTtcblxuXHRcdHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgga2V5LCBKU09OLnN0cmluZ2lmeSggZGF0YSApICk7XG5cdH1cbn1cbiIsImltcG9ydCB7IGVuZHBvaW50cyB9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgeyBNb2R1bGVJbnRlcmZhY2UgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIEluc3RhZ3JhbU1vZHVsZSBpbXBsZW1lbnRzIE1vZHVsZUludGVyZmFjZSB7XG5cdHB1YmxpYyByZWY6IGFueTtcblxuXHRjb25zdHJ1Y3Rvciggb3B0aW9uczogYW55ID0ge30gKSB7XG5cdFx0aWYgKCBvcHRpb25zLnJlZiApIHtcblx0XHRcdHRoaXMucmVmID0gb3B0aW9ucy5yZWY7XG5cdFx0fVxuXHR9XG5cblx0Ly8gSU5TVEFOQ0UgTUVUSE9EU1xuXHQvKipcblx0ICogRnVuY3Rpb24gZmV0Y2hlcyBhIGdpdmVuIEluc3RhZ3JhbSBmZWVkIGZyb20gdGhlIFNvY2lhbCBQcm94eSBBUEksIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIFByb21pc2UuXG5cdCAqXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSBoYW5kbGUgLSBUaGUgSW5zdGFncmFtIGhhbmRsZS9mZWVkIHRvIGZldGNoLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuXHQgKiBAcmV0dXJuIHtQcm9taXNlfVxuXHQgKi9cblx0ZmV0Y2goIGhhbmRsZTogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSApIHtcblx0XHRyZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xuXHRcdFx0dmFyIHF1ZXJ5ID0gb3B0aW9ucy5xdWVyeSB8fCB7fTtcblx0XHRcdHZhciB0dGwgPSBvcHRpb25zLnR0bCB8fCBudWxsO1xuXHRcdFx0dmFyIHF1ZXJ5U3RyaW5nID0gT2JqZWN0LmtleXMoIHF1ZXJ5ICkubWFwKCAoIGtleSApID0+IHsgcmV0dXJuIGAke2tleX09JHtxdWVyeVsga2V5IF19YDsgfSApLmpvaW4oICcmJyApO1xuXG5cdFx0XHQvLyBDb25zdHJ1Y3QgcmVxdWVzdCBlbmRwb2ludC5cblx0XHRcdHZhciB1cmwgPSBgJHtlbmRwb2ludHMuaW5zdGFncmFtfS8ke2hhbmRsZX0/JHtxdWVyeVN0cmluZ31gO1xuXG5cdFx0XHQvLyBDaGVjayBpZiByZXF1ZXN0ZWQgZGF0YSBoYXMgYmVlbiBmZXRjaGVkL2NhY2hlZC5cblx0XHRcdHZhciBjYWNoZWREYXRhID0gdGhpcy5yZWYuY2FjaGUuZ2V0Q2FjaGUoIHsgcGxhdGZvcm06ICdpbnN0YWdyYW0nLCBoYW5kbGUsIHVybCB9ICk7XG5cblx0XHRcdC8vIFJldHVybiBjYWNoZWQgZGF0YSBpZjpcblx0XHRcdC8vIC0gJ2J1c3QgY2FjaGUnIHNldCB0byBmYWxzZS5cblx0XHRcdC8vIC0gZGF0YSBleGlzdHMuXG5cdFx0XHQvLyAtIGRhdGEgaXMgbm90IGV4cGlyZWQuXG5cdFx0XHQvLyBPdGhlcndpc2UsIGZldGNoIG5ldyBkYXRhLlxuXHRcdFx0aWYgKCAhb3B0aW9ucy5idXN0Q2FjaGUgJiYgY2FjaGVkRGF0YSAmJiAhY2FjaGVkRGF0YS5zb2NpYWxQcm94eS5pc0V4cGlyZWQgKSB7XG5cdFx0XHRcdHJlc29sdmUoIGNhY2hlZERhdGEgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBmZXRjaCBuZXcgZGF0YS5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZldGNoKCB1cmwgKVxuXHRcdFx0XHRcdC50aGVuKCAoIHJlc3BvbnNlICkgPT4ge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0XHQudGhlbiggKCBkYXRhICkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gUmVqZWN0IGlmIGVycm9yLlxuXHRcdFx0XHRcdFx0aWYgKCBkYXRhLmVycm9yICkge1xuXHRcdFx0XHRcdFx0XHRyZWplY3QoIGRhdGEgKTtcblx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBDYWNoZSBpZiBhcHBsaWNhYmxlLlxuXHRcdFx0XHRcdFx0aWYgKCAhIW9wdGlvbnMuY2FjaGUgKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMucmVmLmNhY2hlLnNldENhY2hlKCBkYXRhLCB7XG5cdFx0XHRcdFx0XHRcdFx0cGxhdGZvcm06ICdpbnN0YWdyYW0nLFxuXHRcdFx0XHRcdFx0XHRcdGhhbmRsZSxcblx0XHRcdFx0XHRcdFx0XHR1cmwsXG5cdFx0XHRcdFx0XHRcdFx0dHRsLFxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJlc29sdmUoIGRhdGEgKTtcblx0XHRcdFx0XHR9IClcblx0XHRcdFx0XHQuY2F0Y2goICggZXJyICkgPT4ge1xuXHRcdFx0XHRcdFx0cmVqZWN0KCBlcnIgKTsgLy8vIFRPRE86IEVuc3VyZSB0aGF0IHRoaXMgaW5jbHVkZXMgbWVhbmluZ2Z1bCBpbmZvL2hhcyBzYW1lICdzaGFwZScgYXMgb3RoZXIgZXJyb3JzLlxuXHRcdFx0XHRcdH0gICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59XG4iLCJpbXBvcnQgeyBlbmRwb2ludHMgfSBmcm9tICcuLi8uLi9jb25maWcnO1xuaW1wb3J0IHsgTW9kdWxlSW50ZXJmYWNlIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjbGFzcyBTbGFja01vZHVsZSBpbXBsZW1lbnRzIE1vZHVsZUludGVyZmFjZSB7XG5cdHB1YmxpYyByZWY6IGFueTtcblxuXHRjb25zdHJ1Y3Rvciggb3B0aW9uczogYW55ID0ge30gKSB7XG5cdFx0aWYgKCBvcHRpb25zLnJlZiApIHtcblx0XHRcdHRoaXMucmVmID0gb3B0aW9ucy5yZWY7XG5cdFx0fVxuXHR9XG5cblx0Ly8gSU5TVEFOQ0UgTUVUSE9EU1xuXHQvKipcblx0ICogR2l2ZW4gYSBgaGFuZGxlYCBzdHJpbmcsIG1ldGhvZCBzZW5kcyBhIFBPU1QgcmVxdWVzdCB0byB0aGUgY29ycmVzcG9uZGluZyBTb2NpYWwgUHJveHkgZW5kcG9pbnQgYW5kIHJldHVybnMgdGhlIHJlc3VsdCBhcyBhIFByb21pc2UuXG5cdCAqXG5cdCAqIFRoZSBtZXRob2QgbXVzdCBiZSBpbnZva2VkIHdpdGggYW4gYG9wdGlvbnNgIG9iamVjdCwgd2hpY2ggaW4gdHVybiBtdXN0IGluY2x1ZGUgYSAndGV4dCcga2V5LlxuXHQgKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gaGFuZGxlXG5cdCAqIEByZXR1cm4ge1Byb21pc2V9XG5cdCAqL1xuXHQvLy8gVE9ETzogVXBkYXRlIG1ldGhvZCB0byBhY2NlcHQgYW55IGRhdGEgd2hpY2ggY2FuIGJlIHBvc3RlZCB0byBTbGFjayAoZWcuICdhdHRhY2htZW50cycsICdwcmV0ZXh0JywgZXRjLikuXG5cdHBvc3QoIGhhbmRsZTogc3RyaW5nLCBvcHRpb25zOiBhbnkgPSB7fSApOiBQcm9taXNlPGFueT4ge1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XG5cdFx0XHRsZXQgeyB0ZXh0IH0gPSBvcHRpb25zO1xuXG5cdFx0XHRpZiAoICFoYW5kbGUgfHwgdHlwZW9mIGhhbmRsZSAhPT0gJ3N0cmluZycgKSB7XG5cdFx0XHRcdHJlamVjdCggJ01pc3NpbmcgYGhhbmRsZWAnICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCAhdGV4dCB8fCB0eXBlb2YgdGV4dCAhPT0gJ3N0cmluZycgKSB7XG5cdFx0XHRcdHJlamVjdCggJ2BvcHRpb25zYCBvYmplY3QgbXVzdCBpbmNsdWRlIGEgYHRleHRgIGtleSBvZiB0eXBlIHN0cmluZy4nICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0bGV0IHVybCA9IGAke2VuZHBvaW50cy5zbGFja30vJHtoYW5kbGV9P3RleHQ9JHt0ZXh0fWA7XG5cdFx0XHRsZXQgcmVxdWVzdENvbmZpZyA9IHtcblx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHR9O1xuXG5cdFx0XHRmZXRjaCggdXJsLCByZXF1ZXN0Q29uZmlnIClcblx0XHRcdFx0LnRoZW4oICggcmVzcG9uc2UgKSA9PiB7XG5cdFx0XHRcdFx0cmVzb2x2ZSggcmVzcG9uc2UudGV4dCgpICk7IC8vLyBUT0RPOiBDb25maXJtIHRoYXQgcmVzcG9uc2Ugd2lsbCBiZSAndGV4dCcgaW4gYWxsIGNhc2VzLlxuXHRcdFx0XHR9IClcblx0XHRcdFx0LmNhdGNoKCAoIGVyciApID0+IHtcblx0XHRcdFx0XHRyZWplY3QoIGVyciApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG59XG4iXX0=
