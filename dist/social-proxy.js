(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const instagram_1 = require("./modules/instagram");
const cache_1 = require("./modules/cache");
(function (window) {
    if (window['socialProxy']) {
        console.log('Whoops, looks like the `socialProxy` API has already been added!');
        return;
    }
    class SocialProxy {
        constructor() {
            this.instagram = new instagram_1.InstagramModule({ ref: this });
            this.cache = new cache_1.CacheModule({ ref: this });
        }
    }
    ;
    window['socialProxy'] = new SocialProxy();
})(window);

},{"./modules/cache":2,"./modules/instagram":3}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class CacheModule {
    constructor(options = {}) {
        if (options.ref) {
            this.ref = options.ref;
        }
    }
    sanitizeTtl(ttl) {
        return (ttl && typeof ttl === 'number') ? (new Date().getTime() + ttl) : null;
    }
    getDefaultTtl() {
        return (new Date().getTime() + (1000 * 60 * 60 * 24 * 7));
    }
    getCachePrefix() {
        return 'socialProxy';
    }
    getCacheKey(options = {}) {
        var platform = options.platform;
        var handle = options.handle;
        var url = options.url;
        if (platform && handle && url) {
            return `${this.getCachePrefix()}__${platform}__${handle}__${url}`;
        }
        else {
            return null;
        }
    }
    decorateCache(data = {}) {
        if (!data.socialProxy) {
            data.socialProxy = {};
        }
        if (data.socialProxy.ttl && typeof data.socialProxy.ttl === 'number') {
            data.socialProxy.isExpired = (data.socialProxy.ttl < new Date().getTime());
        }
        return data;
    }
    getCache(options = {}) {
        var key = this.getCacheKey(options);
        var data = null;
        if (!key) {
            return null;
        }
        data = window.localStorage.getItem(key);
        return (data) ? this.decorateCache(JSON.parse(data)) : data;
    }
    setCache(data, options) {
        if (!window.localStorage) {
            return;
        }
        const key = this.getCacheKey(options);
        const ttl = this.sanitizeTtl(options.ttl) || this.getDefaultTtl();
        data.socialProxy = {
            ttl: ttl,
        };
        window.localStorage.setItem(key, JSON.stringify(data));
    }
}
exports.CacheModule = CacheModule;

},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class InstagramModule {
    constructor(options = {}) {
        if (options.ref) {
            this.ref = options.ref;
        }
    }
    fetch(handle, options = {}) {
        return new Promise((resolve, reject) => {
            var _this = this;
            var query = options.query || {};
            var ttl = options.ttl || null;
            var queryString = Object.keys(query).map((key) => { return `${key}=${query[key]}`; }).join('&');
            var url = `https://social-proxy.herokuapp.com/instagram/${handle}?${queryString}`;
            var cachedData = _this.ref.cache.getCache({ platform: 'instagram', handle, url });
            var req = null;
            if (!options.bustCache && cachedData && !cachedData.socialProxy.isExpired) {
                resolve(cachedData);
                return;
            }
            else {
                req = new XMLHttpRequest();
                req.open('GET', url);
                req.onreadystatechange = function () {
                    if (this.readyState === 4) {
                        var status = this.status;
                        if (parseInt(status) === 200) {
                            if (!!options.cache) {
                                _this.ref.cache.setCache(JSON.parse(this.response), {
                                    platform: 'instagram',
                                    handle,
                                    url,
                                    ttl,
                                });
                            }
                            resolve(JSON.parse(this.response));
                        }
                        else {
                            reject(this.response || this.statusText);
                        }
                    }
                };
                req.send();
            }
        });
    }
}
exports.InstagramModule = InstagramModule;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
